{"version":3,"sources":["components/resume/jobsArray.js","components/resume/Job.js","components/resume/Jobs.js","components/header/RedirectButton.js","components/header/Header.js","components/home/Home.js","components/resume/Resume.js","App.js","serviceWorker.js","index.js"],"names":["employers","name","employmentPeriod","positionsHeld","description","Job","props","sm","this","employer","className","Component","Jobs","jobList","map","Toggle","as","Card","Header","eventKey","Collapse","Body","withRouter","url","Item","Link","fluid","bg","expand","variant","Brand","aria-controls","id","onSelect","selectedKey","history","push","Home","Resume","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8WAgDeA,EAvCC,CACd,CACEC,KAAM,eACNC,iBAAkB,uBAClBC,cAAe,2EACfC,YAAa,iPAEf,CACEH,KAAM,oBACNC,iBAAkB,sBAClBC,cAAe,yBACfC,YAAa,wGAEf,CACEH,KAAM,oCACNC,iBAAkB,uBAClBC,cAAe,kBACfC,YAAa,qKAEf,CACEH,KAAM,kCACNC,iBAAkB,sBAClBC,cAAe,wBACfC,YAAa,iUAEf,CACEH,KAAM,oBACNC,iBAAkB,2BAClBC,cAAe,mBACfC,YAAa,iUAEjB,CACEH,KAAM,qBACNC,iBAAkB,qBAClBC,cAAe,oBACfC,YAAa,6R,mDCvCMC,E,YACnB,WAAYC,GAAO,qEACXA,I,sEAIN,OACE,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAI,GAAG,2BAAIC,KAAKF,MAAMG,SAASP,mBACpC,kBAAC,IAAD,CAAKK,GAAI,GAAG,8CAAZ,IAAmC,2BAAIC,KAAKF,MAAMG,SAASN,iBAE7D,kBAAC,IAAD,CAAKO,UAAU,0BACb,uBAAGA,UAAU,YAAYF,KAAKF,MAAMG,SAASL,oB,GAdtBO,aCEZC,E,iLAGjB,IAAIC,EAAUb,EAAUc,IAAI,SAAAL,GAC1B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAUM,OAAX,CAAkBC,GAAIC,IAAKC,OAAQC,SAAUV,EAASR,MACnDQ,EAASR,MAEZ,kBAAC,IAAUmB,SAAX,CAAoBD,SAAUV,EAASR,MACrC,kBAAC,IAAKoB,KAAN,KAAW,kBAAC,EAAD,CAAKZ,SAAUA,SAKlC,OACE,6BACE,kBAAC,IAAD,KACGI,Q,GAlBuBF,a,0CCFnBW,G,MAAAA,YAAW,SAAwBhB,GAChD,IAAIiB,EAAG,WAAOjB,EAAMiB,KACpB,OAEE,kBAAC,IAAIC,KAAL,KACE,kBAAC,IAAIC,KAAL,CAAUN,SAAUI,GAApB,IAA4BjB,EAAML,KAAlC,SCDAiB,G,kBACJ,aAAe,uE,sEAGL,IAAD,OACP,OACE,kBAAC,IAAD,CAAWQ,MAAM,OAAOhB,UAAU,cAChC,kBAAC,IAAD,CAAQiB,GAAG,OAAOC,OAAO,KAAKC,QAAQ,QACpC,kBAAC,IAAOC,MAAR,iCACA,kBAAC,IAAOf,OAAR,CAAegB,gBAAc,0BAC7B,kBAAC,IAAOX,SAAR,CAAiBY,GAAG,yBAClB,kBAAC,IAAD,CAAKtB,UAAU,UAAUuB,SAAU,SAAAC,GAAW,OAAI,EAAK5B,MAAM6B,QAAQC,KAAKF,KACxE,kBAAC,EAAD,CAAgBX,IAAI,GAAGtB,KAAK,SAC5B,kBAAC,EAAD,CAAgBsB,IAAI,SAAStB,KAAK,mB,GAb3BU,cAsBNW,cAAWJ,GC7BLmB,E,iLAEjB,OACE,6BACE,2C,GAJ0B1B,aCCb2B,E,iLAEjB,OACE,6BACE,kBAAC,EAAD,W,GAJ4B3B,aCiBrBW,kBAZf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,UAAUC,UAAWH,QCFrBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,gBAAD,KAAe,kBAAC,EAAD,MAAf,KAAyCC,SAASC,eAAe,SD0H3E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b2fcdfcc.chunk.js","sourcesContent":["/*Empty employer\n{\n    name: '',\n    employmentPeriod: '',\n    positionsHeld: '',\n    description: ''\n},\n*/\n\nlet employers = [\n  {\n    name: 'Olive Garden',\n    employmentPeriod: 'Aug 2013 - Sept 2015',\n    positionsHeld: 'Utility, Salad/Alley, Production, Pasta, Back of House Certified Trainer',\n    description: 'Having Worked multiple positions available in the back of house at Olive Garden, I became a certified trainer to allow me to make sure new team members would be trained properly. I worked each back of house job available at Olive Garden.'\n  },\n  {\n    name: 'The Grass Chopper',\n    employmentPeriod: 'May 2014 - Aug 2014',\n    positionsHeld: 'Lawnmower / Landscaper',\n    description: 'Working for the Grass Chopper as a summer job, I mowed lawns and did landscaping when it was needed.'\n  },\n  {\n    name: 'Ted’s Montana Grill, Bozeman',\n    employmentPeriod: 'Oct 2015 - Sept 2016',\n    positionsHeld: 'Line Cook, Chef',\n    description: 'I moved to Ted’s from Olive Garden for better opportunity to cook food which I really enjoy. I worked as a back of house cook and a line cook when required.'\n  },\n  {\n    name: 'Rooks Comics and Games, Bozeman',\n    employmentPeriod: 'Aug 2016 - May 2018',\n    positionsHeld: 'Sales Floor Associate',\n    description: 'After Having worked in the back of house at  restaurants, I welcomed the opportunity to work at Rooks. After just a short while, I realized that I really enjoy interacting directly with customers and helping people find what they need - if I get to talk about something I enjoy, it really doesn’t feel like work.'\n  },\n  {\n    name: 'McDonalds Bozeman',\n    employmentPeriod: 'Oct 2017 - December 2018',\n    positionsHeld: 'Floor Supervisor',\n    description: 'I started working at McDonalds to save up for my wedding, quickly moving from a crew member to a floor supervisor. I have worked every position from taking orders on the counter to assembling the food. Also, as an opening floor supervisor I have had to keep safe and make sure all of the drawers are properly counted.'\n},\n{\n  name: 'Bequet Confections',\n  employmentPeriod: 'May 2019 - Present',\n  positionsHeld: 'Associate Trainer',\n  description: 'Not long after starting at Bequet, I learned most tasks for the business. I work everything from the customer point of sale to tasks in the cooking room. I was moved into a trainer position very quickly for my ability to articulate and understand the important aspects of our job.'\n},\n]\n\nexport default employers;","import React, { Component } from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nexport default class Job extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n      <Container>\n        <Row>\n          <Col sm={3}><b>{this.props.employer.employmentPeriod}</b></Col>\n          <Col sm={9}><b>Positions Held:</b> <i>{this.props.employer.positionsHeld}</i></Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <p className=\"indented\">{this.props.employer.description}</p>\n        </Row>\n      </Container>\n    </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport employers from './jobsArray'\nimport Job from './Job'\n\n\nexport default class Jobs extends Component {\n  render() {\n\n    let jobList = employers.map(employer => {\n      return (\n        <Card>\n          <Accordion.Toggle as={Card.Header} eventKey={employer.name}>\n            {employer.name}\n          </Accordion.Toggle>\n          <Accordion.Collapse eventKey={employer.name}>\n            <Card.Body><Job employer={employer} /></Card.Body>\n          </Accordion.Collapse>\n        </Card>\n      )\n    })\n    return (\n      <div>\n        <Accordion>\n          {jobList}\n        </Accordion>\n\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport Nav from 'react-bootstrap/Nav'\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer'\n\nexport default withRouter(function RedirectButton(props) {\n  let url = `/${props.url}`\n  return (\n    // <LinkContainer to={url}>\n    <Nav.Item>\n      <Nav.Link eventKey={url} > {props.name} </Nav.Link>\n    </Nav.Item>\n    // </LinkContainer>\n  )\n});","import React, { Component } from 'react'\nimport { withRouter, Link } from 'react-router-dom'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport RedirectButton from './RedirectButton'\nimport Container from 'react-bootstrap/Container'\nimport './header.css'\n\n\nclass Header extends Component {\n  constructor() {\n    super()\n  }\n  render() {\n    return (\n      <Container fluid=\"true\" className=\"navigation\">\n        <Navbar bg=\"dark\" expand=\"sm\" variant=\"dark\">\n          <Navbar.Brand> Taylor Warren's Resume </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\" onSelect={selectedKey => this.props.history.push(selectedKey)}>\n              <RedirectButton url='' name='Home' />\n              <RedirectButton url='resume' name='Resume' />\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </Container>\n    )\n  }\n}\n\nexport default withRouter(Header);","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n        <h1> Home </h1>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Jobs from './Jobs'\n\nexport default class Resume extends Component {\n  render() {\n    return (\n      <div>\n        <Jobs />\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Jobs from './components/resume/Jobs';\nimport { withRouter, Switch, Route } from 'react-router-dom'\nimport Header from './components/header/Header';\nimport Home from './components/home/Home'\nimport Resume from './components/resume/Resume';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/resume\" component={Resume} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /> </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}